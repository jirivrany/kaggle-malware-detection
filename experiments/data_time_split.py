
import numpy as np
import pandas as pd
import gc
from tqdm import tqdm

def load(x):
    ignore = ['MachineIdentifier']
    if x in ignore: return False
    else: return True


# REDUCE CATEGORY CARDINALITY
def relax_data(df_train, df_test, col):
    cv1 = pd.DataFrame(df_train[col].value_counts().reset_index().rename({col:'train'},axis=1))
    cv2 = pd.DataFrame(df_test[col].value_counts().reset_index().rename({col:'test'},axis=1))
    cv3 = pd.merge(cv1,cv2,on='index',how='outer')
    cv3['train'].fillna(0,inplace=True)
    cv3['test'].fillna(0,inplace=True)
    factor = len(df_test)/len(df_train)
    cv3['remove'] = False
    cv3['remove'] = cv3['remove'] | (cv3['train'] < len(df_train)/9000)
    cv3['remove'] = cv3['remove'] | (factor*cv3['train'] < cv3['test']/4)
    cv3['remove'] = cv3['remove'] | (factor*cv3['train'] > 4*cv3['test'])
    cv3['new'] = cv3.apply(lambda x: x['index'] if x['remove']==False else 0,axis=1)
    cv3['new'],_ = cv3['new'].factorize(sort=True)
    cv3.set_index('index',inplace=True)
    cc = cv3['new'].to_dict()
    df_train[col] = df_train[col].map(cc)
    df_test[col] = df_test[col].map(cc)



    


# LOAD TRAIN AND TEST
df_train = pd.read_csv('../input/train.csv',dtype='category',usecols=load)
df_train['HasDetections'] = df_train['HasDetections'].astype('int8')
if 5244810 in df_train.index:
    df_train.loc[5244810,'AvSigVersion'] = '1.273.1144.0'
    df_train['AvSigVersion'].cat.remove_categories('1.2&#x17;3.1144.0',inplace=True)

df_test = pd.read_csv('../input/test.csv',dtype='category',usecols=load)

df_train['AvSigVersion2'] = df_train['AvSigVersion'].map(lambda x: np.int(x.split('.')[1]))

cols = [x for x in df_train.columns if x not in ['HasDetections','AvSigVersion2']]

for col in tqdm(cols): 
    relax_data(df_train, df_test, col)

for col in tqdm(cols):
    df_train[col] = df_train[col].astype('category')
    df_test[col] = df_test[col].astype('category')


df_train_new = df_train[ df_train['AvSigVersion2']<275 ]
df_valid = df_train[ df_train['AvSigVersion2']>=275 ]

df_train_new.to_pickle('../input/train_split.pkl')
df_valid.to_pickle('../input/valid_split.pkl')
df_test.to_pickle('../input/test_split.pkl')