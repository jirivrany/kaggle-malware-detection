import warnings
import gc
import time
import sys
import datetime

import utils


import numpy as np 
import pandas as pd 
import catboost as cb


from sklearn.model_selection import KFold
from sklearn.metrics import roc_auc_score


pd.options.mode.chained_assignment = None
pd.options.display.max_columns = 999

from tqdm import tqdm

print("script started: ", time.strftime("%b %d %Y %H:%M:%S"))


dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }



        
numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numerical_columns = [c for c,v in dtypes.items() if v in numerics]
categorical_columns = [c for c,v in dtypes.items() if v not in numerics]

retained_columns = numerical_columns + categorical_columns


retained_columns.remove('MachineIdentifier')

train = pd.read_csv('../input/train.csv', usecols=retained_columns, dtype=dtypes)
target = train['HasDetections']
del train['HasDetections']

retained_columns.remove('HasDetections')
test = pd.read_csv('../input/test.csv', usecols=retained_columns, dtype=dtypes)

train = utils.reduce_mem_usage(train)
test = utils.reduce_mem_usage(test)


true_numerical_columns = [
    'Census_ProcessorCoreCount',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_InternalBatteryNumberOfCharges'
]

binary_variables = [c for c in train.columns if train[c].nunique() == 2]

true_categorical_columns = [c for c in train.columns 
                       if (c not in true_numerical_columns) & (c not in binary_variables)]



def encode_categorical_columns(x_train, x_test, columns, sort=True):
    train_length = x_train.shape[0]
    for col in tqdm(columns):
        if col == 'MachineIdentifier' or col == 'HasDetections':
            continue
            
        combined_data = pd.concat([x_train[col], x_test[col]])
        combined_data, _ = pd.factorize(combined_data, sort=sort)
        combined_data = pd.Series(combined_data).astype('int32')
        combined_data = combined_data + abs(combined_data.min()) + 1
        x_train[col] = combined_data.iloc[:train_length].values
        x_test[col] = combined_data.iloc[train_length:].values
        x_train[col] = x_train[col].fillna(0)
        x_test[col] = x_test[col].fillna(0)
        del combined_data
        
    return x_train, x_test



train, test = encode_categorical_columns(train, test, true_categorical_columns)

print(train.dtypes)

train = utils.reduce_mem_usage(train)
test = utils.reduce_mem_usage(test)

print(train.dtypes)


# save data in case that model crashes
train.to_pickle('../input/train_new.pkl.gz', compression='gzip')
test.to_pickle('../input/test_new.pkl.gz', compression='gzip')
target.to_pickle('../input/target.pkl.gz', compression='gzip')

## Prepare Categorical Variables

print("data preparation finished: ", time.strftime("%b %d %Y %H:%M:%S"))


# Let's try a CatBoost just for 3 iterations

max_iter=5

features = train.columns

folds = KFold(n_splits=5, shuffle=True, random_state=15)
oof_cb = np.zeros(len(train))
predictions_cb = np.zeros(len(test))
score = [0 for _ in range(folds.n_splits)]

for fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, target.values)):
    print('------')
    print("Fold {} started ".format(fold_ + 1), time.strftime("%b %d %Y %H:%M:%S"))
    X_train, y_train = train[features].iloc[trn_idx], target.iloc[trn_idx]
    X_valid, y_valid = train[features].iloc[val_idx], target.iloc[val_idx]
    
    categorical_features_pos = utils.column_index(X_train, categorical_columns)
    print(categorical_features_pos)

    
    model = cb.CatBoostClassifier(
        learning_rate = 0.25,
        iterations = 10000,
        eval_metric = 'AUC',
        allow_writing_files = False,
        od_type = 'Iter',
        bagging_temperature = 0.3,
        random_strength = 0.1,
        l2_leaf_reg = 0.1,
        depth = 8,
        od_wait = 20, 
        task_type='GPU')
    
            
    # Fit
    model.fit(
        X_train, y_train,
        eval_set=[(X_train, y_train), (X_valid, y_valid)],
        early_stopping_rounds=50,
        cat_features=categorical_features_pos,
        verbose_eval=100
    )
    
    oof_cb[val_idx] = model.predict(X_valid)
    predictions_cb += model.predict(test[features]) / min(folds.n_splits, max_iter)    
    
    score[fold_] = metrics.roc_auc_score(target.iloc[val_idx], oof_cb[val_idx])
    if fold_ == max_iter - 1: break
        
if (folds.n_splits == max_iter):
    print("CV score: {:<8.5f}".format(metrics.roc_auc_score(target, oof_cb)))
else:
     print("CV score: {:<8.5f}".format(sum(score) / max_iter))


# In[ ]:

sub_df = pd.read_csv('../input/sample_submission.csv')
sub_df["HasDetections"] = predictions_cb

sub_df.to_csv("../output/submit-catboost-cv{:6f}.csv".format(score), index=False)

print("script finished: ", time.strftime("%b %d %Y %H:%M:%S"))

