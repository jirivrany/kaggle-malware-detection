# coding: utf-8

import numpy as np 
import pandas as pd 
import lightgbm as lgb
from sklearn.model_selection import KFold
import warnings
import gc
import time
import sys
import datetime
from tqdm import tqdm

from utils import reduce_mem_usage

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }



too_many_unique_vals = [
                        'Census_FirmwareVersionIdentifier',
                        'Census_OEMModelIdentifier',
                        'CityIdentifier'
                       ]

too_many_nas = ['PuaMode',
                'Census_ProcessorClass',
                'DefaultBrowsersIdentifier',
                'Census_IsFlightingInternal',
                'Census_InternalBatteryType',
                'Census_ThresholdOptIn',
                'Census_IsWIMBootEnabled'
               ]

too_imbalanced = ['Census_IsFlightsDisabled',
                  'Census_IsAlwaysOnAlwaysConnectedCapable',
                  'AVProductsEnabled',
                  'IsProtected',
                  'RtpStateBitfield',
                  'Census_IsVirtualDevice',
                  'Census_IsPortableOperatingSystem',
                  'Census_IsPenCapable',
                  'Census_FlightRing',
                  'OsVer',
                  'IsBeta',
                  'Platform',
                  'AutoSampleOptIn',
                  'Census_DeviceFamily',
                  'ProductName'
                 ]


cols_to_remove_dct = {
    'all' : set(too_many_unique_vals + too_many_nas + too_imbalanced),
    'uni_nas': set(too_many_unique_vals + too_many_nas),
    'uni_imb': set(too_many_unique_vals + too_imbalanced),
    'nas_imb': set(too_many_nas + too_imbalanced),
    'uni': set(too_many_unique_vals),
    'nas': set(too_many_nas)
}

for file_suffix, cols_to_remove in cols_to_remove_dct.items():

    train = pd.read_pickle('../input/train.pkl')
    print("TRAIN LOADED")
    test = pd.read_pickle('../input/test.pkl')
    print("TEST LOADED")

    print(cols_to_remove)

    train.drop(cols_to_remove, axis=1, inplace=True)
    test.drop(cols_to_remove, axis=1, inplace=True)

    true_numerical_columns = [
        'Census_ProcessorCoreCount',
        'Census_PrimaryDiskTotalCapacity',
        'Census_SystemVolumeTotalCapacity',
        'Census_TotalPhysicalRAM',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches',
        'Census_InternalPrimaryDisplayResolutionHorizontal',
        'Census_InternalPrimaryDisplayResolutionVertical',
        'Census_InternalBatteryNumberOfCharges'
    ]


    true_numerical_columns = [col for col in true_numerical_columns if col not in cols_to_remove]

    binary_variables = [c for c in train.columns if train[c].nunique() == 2]

    categorical_columns = [c for c in train.columns 
                           if (c not in true_numerical_columns) & (c not in binary_variables)]


    print("BINARY", binary_variables)

    print("CATEGORICALS", categorical_columns)

                           
    variables = {
        'categorical_columns': len(categorical_columns),
        'binary_variables': len(binary_variables),
        'true_numerical_columns': len(true_numerical_columns)
    }

    cardinality = []
    for c in categorical_columns:
        if c == 'MachineIdentifier': continue
        cardinality.append([c, train[c].nunique()])
    cardinality.sort(key = lambda x:x[1], reverse=False)

    def frequency_encoding(variable):
        t = train[variable].value_counts().reset_index()
        t = t.reset_index()
        t.loc[t[variable] == 1, 'level_0'] = np.nan
        t.set_index('index', inplace=True)
        max_label = t['level_0'].max() + 1
        t.fillna(max_label, inplace=True)
        return t.to_dict()['level_0']
        

    variables = ['Census_OEMModelIdentifier', 'CityIdentifier', 'Census_FirmwareVersionIdentifier']
    variables = [var for var in variables if var not in cols_to_remove]
    for variable in tqdm(variables):
        freq_enc_dict = frequency_encoding(variable)
        train[variable] = train[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
        test[variable] = test[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
        categorical_columns.remove(variable)
        
    indexer = {}
    for col in tqdm(categorical_columns):
        if col == 'MachineIdentifier': continue
        _, indexer[col] = pd.factorize(train[col])
        
    for col in tqdm(categorical_columns):
        if col == 'MachineIdentifier': continue
        train[col] = indexer[col].get_indexer(train[col])
        test[col] = indexer[col].get_indexer(test[col])
        
    train = reduce_mem_usage(train)
    test = reduce_mem_usage(test)

    train.to_pickle('../input/train-fe-rem-{}.pkl'.format(file_suffix))
    test.to_pickle('../input/test-fe-rem-{}.pkl'.format(file_suffix))