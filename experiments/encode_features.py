# coding: utf-8

import numpy as np
import pandas as pd
from tqdm import tqdm

from utils import frequency_encoding

train = pd.read_pickle('../input/train.pkl')
print("TRAIN LOADED")
test = pd.read_pickle('../input/test.pkl')
print("TEST LOADED")


true_numerical_columns = [
    'Census_ProcessorCoreCount',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_InternalBatteryNumberOfCharges'
]


binary_variables = [c for c in train.columns if train[c].nunique() == 2]

categorical_columns = [c for c in train.columns
                       if (c not in true_numerical_columns) & (c not in binary_variables)]


# Encode Smart Screen

screen_repl = {'&#x01;':'on', '&#x02;':'off', '&#x03;':'unknown', '0':'off', '00000000':'off', 'Block':'unknown', 'BLOCK':'unknown', 'Deny':'off', 'Enabled':'on',
'ExistsNotSet':'off', 'of':'off', 'Off':'off', 'off':'off', 'OFF':'off', 'On':'on', 'on':'on', 'ON':'on', 'Promprt':'unsure',
'Prompt':'unsure', 'prompt':'unsure', 'Promt':'unsure', 'RequireAdmin':'unsure', 'requireadmin':'unsure', 'requireAdmin':'unsure', 'RequiredAdmin':'unsure',
'Warn':'unsure', 'warn':'unsure'}

train['SmartScreen'].replace(screen_repl, inplace=True)
test['SmartScreen'].replace(screen_repl, inplace=True)

train['SmartScreen'].fillna('unknown',inplace=True)
test['SmartScreen'].fillna('unknown',inplace=True)

print("SmartScreen encoded")


frequency_encoded_variables = [
    'Census_OEMModelIdentifier',
    'CityIdentifier',
    'Census_FirmwareVersionIdentifier',
    'AvSigVersion',
    'Census_ProcessorModelIdentifier',
    'Census_OEMNameIdentifier',
    'DefaultBrowsersIdentifier'
]

print("Frequency variables")
for variable in tqdm(frequency_encoded_variables):
    freq_enc_dict = frequency_encoding(train, test, variable)
    train[variable] = train[variable].map(
        lambda x: freq_enc_dict.get(x, np.nan))
    test[variable] = test[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
    categorical_columns.remove(variable)


print("Categorical encoding")
indexer = {}
for col in tqdm(categorical_columns):
    if col == 'MachineIdentifier':
        continue
    _, indexer[col] = pd.factorize(train[col])

for col in tqdm(categorical_columns):
    if col == 'MachineIdentifier':
        continue
    train[col] = indexer[col].get_indexer(train[col])
    test[col] = indexer[col].get_indexer(test[col])

train.to_pickle('../input/train-encoded.pkl')
test.to_pickle('../input/test-encoded.pkl')
