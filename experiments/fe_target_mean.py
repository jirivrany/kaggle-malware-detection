# coding: utf-8
import gc
import pickle
import numpy as np
import pandas as pd
from itertools import combinations
from tqdm import tqdm

import utils
import conversions

cols = [
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'AVProductStatesIdentifier',
    'AVProductsInstalled',
    'SmartScreen',
    'Census_OEMModelIdentifier',
    'Census_ProcessorModelIdentifier',
    'Census_PrimaryDiskTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_FirmwareVersionIdentifier',
    'HasDetections',
    'MachineIdentifier'
]


train = pd.read_csv('../input/train.csv', usecols=cols, dtype=utils.DTYPES)
train = pd.read_pickle('../input/train_cols_for_target_mean.pkl')
print("TRAIN LOADED")

target = 'HasDetections'
cols.remove(target)

test = pd.read_csv('../input/test.csv', usecols=cols, dtype=utils.DTYPES)
test = pd.read_pickle('../input/test_cols_for_target_mean.pkl')
print("TEST LOADED")

train.to_pickle('../input/train_cols_for_target_mean.pkl')
test.to_pickle('../input/test_cols_for_target_mean.pkl')


for col in cols:
    print(col)
    new_feature = 'fe_{}_target_mean_enc'.format(col)
    train[col] = train[col].astype('str')
    test[col] = test[col].astype('str')
    train[col].fillna(999999, inplace=True)
    test[col].fillna(999999, inplace=True)
    groups_sum = train.groupby(col)[target].transform('sum')
    nr_groups = train.groupby(col)[target].transform('count')
    train[new_feature] = (groups_sum - train[target]) / (nr_groups - 1)
    train[new_feature].fillna(train[new_feature].mean(), inplace=True)

    print("preparing map")
    mapa = dict(train[[col, new_feature]].values)

    print("mapping")
    test[new_feature] = test[col].map(mapa)
    test[new_feature].fillna(test[new_feature].mean(), inplace=True)

print("computed, now reducing size")

train.drop(cols, inplace=True)    
test.drop(cols, inplace=True)
train.drop([target], inplace=True)

train = utils.reduce_mem_usage(train)
test = utils.reduce_mem_usage(test)

print("saving results")

train.to_pickle('../input/train_target_mean.pkl')
test.to_pickle('../input/test_target_mean.pkl')

