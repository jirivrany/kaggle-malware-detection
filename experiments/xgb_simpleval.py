# coding: utf-8
import os
import time
import gc


import kaggle
import numpy as np
import pandas as pd
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns

print("script started: ", time.strftime("%b %d %Y %H:%M:%S"))


experiment_nr = 56
random_state = 42

train_fname = '../input/train-encoded-full-corr-v2.pkl'
test_fname = '../input/test-encoded-full-corr-v2.pkl'

train = pd.read_pickle(train_fname)
print("TRAIN LOADED")

target = pd.read_pickle('../input/target.pkl')


gc.collect()


features = [c for c in train.columns if c not in ['MachineIdentifier']]


x_train, x_val, y_train, y_val = train_test_split(
    train[features], target, test_size=0.15, random_state=random_state)

del train
gc.collect()

print("TRAIN PREPARED")


print("STARTING TRAINING")

clf = XGBClassifier(
    max_depth=10,
    tree_method='gpu_hist',
    n_gpus=10,
    nthread=20,
    verbosity=2,
    n_estimators=10000,
    colsample_bytree=0.8,
    subsample=0.8,
    earning_rate=0.05,
    eta=0.3,
    seed=42)

clf.fit(
    x_train,
    y_train,
    eval_metric="auc",
    eval_set=[(x_train, y_train), (x_val, y_val)],
    verbose=True,
    early_stopping_rounds=200)


predictions = clf.predict(x_val)
false_positive_rate, recall, thresholds = metrics.roc_curve(y_val, predictions)
score = metrics.auc(false_positive_rate, recall)


cv_score_printable = "{:<8.5f}".format(score)
print("CV score: {}".format(cv_score_printable))

test = pd.read_pickle(test_fname)
print("TEST LOADED")

# we perform predictions by chunks
initial_idx = 0
chunk_size = 1000000
predictions = np.zeros(len(test))
while initial_idx < test.shape[0]:
    final_idx = min(initial_idx + chunk_size, test.shape[0])
    idx = range(initial_idx, final_idx)
    predictions[idx] = clf.predict(
        test.iloc[idx][features])
    initial_idx = final_idx

cv_score_printable = cv_score_printable.replace(".", "")
cv_score_printable = cv_score_printable.strip()


# submit predictions

sub_df = pd.read_csv('../input/sample_submission.csv')
sub_df["HasDetections"] = predictions

model_dir = '../output'


model_name = 'submit_e{}_cv{}.csv.gz'.format(experiment_nr, cv_score_printable)

fname = os.path.join(model_dir, model_name)
#param_string = ', '.join(('{}: {}'.format(k, v)
#                          for k, v in lgb_params.items()))
#message = 'CV: {} DATA: {} LGBM params: {}'.format(
#    cv_score_printable, train_fname, param_string)
#competition = 'microsoft-malware-prediction'

sub_df.to_csv(fname, compression='gzip', index=False)
#kaggle.api.competition_submit(os.path.abspath(fname), message, competition)

print("script finished: ", time.strftime("%b %d %Y %H:%M:%S"))
