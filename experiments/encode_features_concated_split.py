# coding: utf-8
import gc
import pickle
import numpy as np
import pandas as pd
from itertools import combinations
from tqdm import tqdm

import utils
import conversions


train = pd.read_pickle('../input/train_split.pkl')
print("TRAIN LOADED")
test = pd.read_pickle('../input/test_split.pkl')
print("TEST LOADED")
valid = pd.read_pickle('../input/valid_split.pkl')
print("VALID LOADED")

# merge both datasets

target_train = train['HasDetections']
del train['HasDetections']

target_train.to_pickle('../input/target_train.pkl')
print("Target saved")
del(target_train)

target_valid = valid['HasDetections']
del valid['HasDetections']
target_valid.to_pickle('../input/target_valid.pkl')
del(target_valid)

train_rows = train.shape[0]
valid_rows = valid.shape[0]

df_full = pd.concat([train, valid, test])

print("MERGED") 
del(train)
del(test)
del(valid)
gc.collect()


def display_features(df):
    # https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    df['fe_non_primary_drive_MB'] = df['Census_PrimaryDiskTotalCapacity'] - df['Census_SystemVolumeTotalCapacity']

    df['aspect_ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal']/ df['Census_InternalPrimaryDisplayResolutionVertical']

    df['fe_monitor_dims'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'].astype(str) + '*' + df['Census_InternalPrimaryDisplayResolutionVertical'].astype('str')
    
  
    df['fe_screen_area'] = (df['aspect_ratio'] * (df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2))/(df['aspect_ratio']**2 + 1)
    
    df.drop('aspect_ratio', axis=1, inplace=True)

    return df
    

original_columns  = list(df_full.columns)


df_full = display_features(df_full)


print("new display features prepared")


#one more test with SmartScreen 


df_full['SmartScreen']=df_full['SmartScreen'].astype(str)
df_full['SmartScreen']=df_full['SmartScreen'].str.lower()
df_full['SmartScreen'].replace({"promt":"prompt",
                        "promprt":"prompt",
                        "00000000":"0",
                        "enabled":"on",
                        "of":"off" ,
                        "deny":"0" , # just one
                        "requiredadmin":"requireadmin"
                       },inplace=True)
df_full['SmartScreen'] = df_full['SmartScreen'].astype("category")
print("SmartScreen ready")

# compute some ratios
print("Preparing ratios")
nrows = df_full.shape[0]
df_full['fe_avsig_gamer_freq'] = df_full.groupby(['AvSigVersion','Wdft_IsGamer'])['OsBuild'].transform('count') / nrows
df_full['fe_cpucores_region_freq'] = df_full.groupby(['Census_ProcessorCoreCount','Wdft_RegionIdentifier'])['OsBuild'].transform('count') / nrows
df_full['fe_cpucores_oemname_freq'] = df_full.groupby(['Census_ProcessorCoreCount','Census_OEMNameIdentifier'])['OsBuild'].transform('count') / nrows
df_full['fe_geoname_oemname_freq'] = df_full.groupby(['GeoNameIdentifier','Census_OEMNameIdentifier'])['OsBuild'].transform('count') / nrows


#encode the versions
print("Version factors")
versions = ['EngineVersion', 'AppVersion', 'AvSigVersion']
for version in tqdm(versions):
    colname = version + '_factor'
    df_full[colname] = utils.add_factor_sort(df_full, version)
    

print("Frequency variables")
to_freq_encode = []
for col in original_columns:
    if df_full[col].nunique() > 1000:
        print(col, df_full[col].nunique())
        to_freq_encode.append(col)

for variable in tqdm(to_freq_encode):
    freq_enc_dict = utils.frequency_encoding_single(df_full, variable)
    df_full[variable] = df_full[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
    categorical_columns.remove(variable)


print("Categorical encoding")
for col in tqdm(original_columns):
    if col == 'MachineIdentifier':
        continue
    #senti = df_full[col].nunique() + 1    
    df_full[col] = pd.factorize(df_full[col])[0]
    df_full[col] = df_full[col].astype('int32')
    df_full[col] = df_full[col] + abs(df_full[col].min()) + 1


print("Correlation features")

corr_df = pd.read_csv('../EDA/corr_features_filtered.csv')


for idx, com in tqdm(corr_df.iterrows()):
    new_name = "fe_{}_{}_{:4f}".format(com['colA'], com['colB'], com['corr_score'])
    pokus = df_full.groupby([com['colA'], com['colB']])['OsBuild'].transform('count') / df_full.shape[0]
    df_full[new_name] = pokus


print("3 cols correlation features")

corr_df = pd.read_csv('../EDA/3cols_corr_165.csv')


for idx, com in tqdm(corr_df.iterrows()):
    new_name = "fe_{}_{}_{}_{:4f}".format(com['colA'], com['colB'], com['colC'], com['corr_score'])
    pokus = df_full.groupby([com['colA'], com['colB'], com['colC']])['OsBuild'].transform('count') / df_full.shape[0]
    df_full[new_name] = pokus


bad_cols = [
 'IsBeta',
 'OsVer',
 'AutoSampleOptIn',
 'Census_DeviceFamily',
 'Census_IsPortableOperatingSystem',
 'Census_IsFlightingInternal',
 'PuaMode',
 'HasTpm',
 'Census_IsFlightsDisabled',
 'ProductName',
 'Platform',
 'OsPlatformSubRelease',
 'Census_IsVirtualDevice',
 'UacLuaenable',
 'Census_InternalPrimaryDisplayResolutionHorizontal',
 'Census_InternalPrimaryDisplayResolutionVertical',
 'Census_IsAlwaysOnAlwaysConnectedCapable',
 'Census_ProcessorManufacturerIdentifier',
 'Census_ChassisTypeName',
 'Census_InternalBatteryNumberOfCharges',
 'Census_InternalBatteryType',
 'fe_AVProductStatesIdentifier_Census_DeviceFamily_0.154504',
 'fe_AVProductStatesIdentifier_AVProductsInstalled_0.154501',
 'fe_AVProductStatesIdentifier_IsProtected_0.154501',
 'fe_AVProductsInstalled_AutoSampleOptIn_0.150419',
 'fe_IsBeta_AVProductsInstalled_0.150438',
 'fe_AVProductsInstalled_Census_DeviceFamily_0.150447',
 'fe_SmartScreen_Census_DeviceFamily_0.184216',
 'fe_IsBeta_AVProductStatesIdentifier_0.154501',
 'fe_ProductName_AVProductStatesIdentifier_0.154501',
 'fe_AVProductStatesIdentifier_PuaMode_0.166995'
 ]

df_full.drop(bad_cols, axis=1, inplace=True)


# split back and save
train = df_full[:train_rows]
valid = df_full[train_rows:train_rows+valid_rows]
test = df_full[train_rows+valid_rows:]

del df_full
gc.collect()

train = utils.reduce_mem_usage(train)
valid = utils.reduce_mem_usage(valid)
test = utils.reduce_mem_usage(test)


print("saving")
train.to_pickle('../input/train_encoded_split.pkl')
valid.to_pickle('../input/valid_encoded_split.pkl')
test.to_pickle('../input/test_encoded_split.pkl')
