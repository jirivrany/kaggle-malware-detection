# coding: utf-8
import gc
import numpy as np
import pandas as pd
from tqdm import tqdm

from utils import frequency_encoding
import conversions

train = pd.read_pickle('../input/train.pkl')
print("TRAIN LOADED")
test = pd.read_pickle('../input/test.pkl')
print("TEST LOADED")

# merge both datasets

target = train['HasDetections']
del train['HasDetections']

target.to_pickle('../input/target.pkl')
print("Target saved")
del(target)

train_rows = train.shape[0]

df_full = pd.concat([train, test])

print("MERGED") 
del(train)
del(test)
gc.collect()

# prepare the features
true_numerical_columns = [
    'Census_ProcessorCoreCount',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches'
    #'Census_InternalPrimaryDisplayResolutionHorizontal',
    #'Census_InternalPrimaryDisplayResolutionVertical',
#    'Census_InternalBatteryNumberOfCharges'
]

new_numerical_columns = [
    'non_primary_drive_MB',
    'aspect_ratio',
    'Screen_Area'
]

def display_features(df):
    # https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    df['M_non_primary_drive_MB'] = df['Census_PrimaryDiskTotalCapacity'] - df['Census_SystemVolumeTotalCapacity']

    df['aspect_ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal']/ df['Census_InternalPrimaryDisplayResolutionVertical']

    df['monitor_dims'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'].astype(str) + '*' + df['Census_InternalPrimaryDisplayResolutionVertical'].astype('str')
    
  
    df['Screen_Area'] = (df['aspect_ratio'] * (df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2))/(df['aspect_ratio']**2 + 1)
    
    df.drop('aspect_ratio', axis=1, inplace=True)

    return df
    
def fill_nan(df):

    df['Census_ThresholdOptIn'] = df['Census_ThresholdOptIn'].fillna(1)
    df['Census_IsWIMBootEnabled'] = df['Census_IsWIMBootEnabled'].fillna(1)
    df['Wdft_IsGamer'] = df['Wdft_IsGamer'].fillna(0)
    
    return df


true_numerical_columns = true_numerical_columns + new_numerical_columns

df_full = display_features(df_full)


bad_cols = [
 'IsBeta',
 'OsVer',
 'AutoSampleOptIn',
 'Census_DeviceFamily',
 'Census_IsPortableOperatingSystem',
 'Census_IsFlightingInternal',
 'PuaMode',
 'HasTpm',
 'Census_IsFlightsDisabled',
 'ProductName',
 'Platform',
 'OsPlatformSubRelease',
 'Census_IsVirtualDevice',
 'UacLuaenable',
 'Census_InternalPrimaryDisplayResolutionHorizontal',
 'Census_InternalPrimaryDisplayResolutionVertical',
 'Census_IsAlwaysOnAlwaysConnectedCapable',
 'Census_ProcessorManufacturerIdentifier',
 'Census_ChassisTypeName',
 'Census_InternalBatteryNumberOfCharges',
 'Census_InternalBatteryType'
 ]

df_full.drop(bad_cols, axis=1, inplace=True)


print("features prepared")

binary_variables = [c for c in df_full.columns if df_full[c].nunique() == 2]

categorical_columns = [c for c in df_full.columns
                       if (c not in true_numerical_columns) & (c not in binary_variables)]



frequency_encoded_variables = [
    'Census_OEMModelIdentifier',
    'CityIdentifier',
    'Census_FirmwareVersionIdentifier',
    'AvSigVersion',
    'Census_ProcessorModelIdentifier',
    'Census_OEMNameIdentifier',
    'DefaultBrowsersIdentifier',
    'OrganizationIdentifier',
    'GeoNameIdentifier',
    'LocaleEnglishNameIdentifier',
    'CountryIdentifier'
]

#print("Frequency variables")
#for variable in tqdm(frequency_encoded_variables):
#    freq_enc_dict = frequency_encoding(train, test, variable)
#    train[variable] = train[variable].map(
#        lambda x: freq_enc_dict.get(x, np.nan))
#    test[variable] = test[variable].map(lambda x: freq_enc_dict.get(x, np.nan))
#    categorical_columns.remove(variable)


print("Categorical encoding")
for col in tqdm(categorical_columns):
    if col == 'MachineIdentifier':
        continue
    df_full[col] = pd.factorize(df_full[col])[0]


train = df_full[:train_rows]
test = df_full[train_rows:]

train.to_pickle('../input/train-encoded-full.pkl')
test.to_pickle('../input/test-encoded-full.pkl')