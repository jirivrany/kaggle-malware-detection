# coding: utf-8

import numpy as np 
import pandas as pd 
import lightgbm as lgb
from sklearn.model_selection import KFold
import warnings
import gc
import time
import sys
import datetime


CATEGORICALS = [
        'MachineIdentifier',
        'ProductName',
        'EngineVersion',
        'AppVersion',
        'AvSigVersion',
        'Platform',
        'Processor',
        'OsVer',
        'OsPlatformSubRelease',
        'OsBuildLab',
        'SkuEdition',
        'Census_MDC2FormFactor',
        'Census_DeviceFamily',
        'Census_OSVersion',
        'Census_OSArchitecture',
        'Census_OSBranch',
        'Census_OSEdition',
        'Census_OSSkuName',
        'Census_OSInstallTypeName',
        'Census_OSWUAutoUpdateOptionsName',
        'Census_GenuineStateName',
        'Census_ActivationChannel',
        'AVProductStatesIdentifier',
        'AVProductsInstalled',
        'CountryIdentifier',
        'GeoNameIdentifier',
        'LocaleEnglishNameIdentifier',
        'IeVerIdentifier',
        'Census_OEMNameIdentifier',
        'Census_OEMModelIdentifier',
        'Census_ProcessorModelIdentifier',
        'Census_OSBuildNumber',
        'Census_OSBuildRevision',
        'Census_FirmwareManufacturerIdentifier',
        'Census_FirmwareVersionIdentifier',
        'OsBuild',
        'Census_OSEdition',
        'Census_OSSkuName',
        'Census_OSInstallLanguageIdentifier',
        'Census_OSUILocaleIdentifier',
        'OsSuite',
        'Wdft_RegionIdentifier'
        ]

train = pd.read_pickle('../input/train-featured.pkl')
print("TRAIN LOADED")
test = pd.read_pickle('../input/test-featured.pkl')
print("TEST LOADED")

def cat(df):
    for cat in CATEGORICALS:
        try:
            df[cat] = df[cat].astype('category')
        except KeyError:
            print("col {} was deleted".format(cat))    

    return df 


def fe(df):

    df['OsBuildLab'] = df['OsBuildLab'].cat.add_categories(['0.0.0.0.0-0'])
    df['OsBuildLab'] = df['OsBuildLab'].fillna('0.0.0.0.0-0')


    df['EngineVersion_2'] = df['EngineVersion'].apply(lambda x: x.split('.')[2]).astype('category')
    df['EngineVersion_3'] = df['EngineVersion'].apply(lambda x: x.split('.')[3]).astype('category')

    df['AppVersion_1'] = df['AppVersion'].apply(lambda x: x.split('.')[1]).astype('category')
    df['AppVersion_2'] = df['AppVersion'].apply(lambda x: x.split('.')[2]).astype('category')
    df['AppVersion_3'] = df['AppVersion'].apply(lambda x: x.split('.')[3]).astype('category')

    df['AvSigVersion_0'] = df['AvSigVersion'].apply(lambda x: x.split('.')[0]).astype('category')
    df['AvSigVersion_1'] = df['AvSigVersion'].apply(lambda x: x.split('.')[1]).astype('category')
    df['AvSigVersion_2'] = df['AvSigVersion'].apply(lambda x: x.split('.')[2]).astype('category')

    df['OsBuildLab_0'] = df['OsBuildLab'].apply(lambda x: x.split('.')[0]).astype('category')
    df['OsBuildLab_1'] = df['OsBuildLab'].apply(lambda x: x.split('.')[1]).astype('category')
    df['OsBuildLab_2'] = df['OsBuildLab'].apply(lambda x: x.split('.')[2]).astype('category')
    df['OsBuildLab_3'] = df['OsBuildLab'].apply(lambda x: x.split('.')[3]).astype('category')
 
    df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[0]).astype('category')
    df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[1]).astype('category')
    df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[2]).astype('category')
    df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(lambda x: x.split('.')[3]).astype('category')

    return df


train = cat(train)
test = cat(test)

print("CONVERTED")

train = fe(train)
test = fe(test)

print("FEATURED")

train.to_pickle('../input/train-featured-2.pkl')
test.to_pickle('../input/test-featured-2.pkl')

print(train.dtypes)


true_numerical_columns = [
    'Census_ProcessorCoreCount',
]


# We also list binary variables, since they can be treated as numericals by tree methods:
binary_variables = [c for c in train.columns if train[c].nunique() == 2]
# to finally make a census of the categorical variables:
categorical_columns = [c for c in train.columns 
                       if (c not in true_numerical_columns) & (c not in binary_variables)]

print("BINARY", binary_variables)

print("CATEGORICALS", categorical_columns)