import warnings
import gc
import time
import sys
import datetime
import utils

import numpy as np 
import pandas as pd 
import catboost as cb


from sklearn.model_selection import KFold
from sklearn.metrics import roc_auc_score


pd.options.mode.chained_assignment = None
pd.options.display.max_columns = 999

from tqdm import tqdm

print("script started: ", time.strftime("%b %d %Y %H:%M:%S"))



# save data in case that model crashes
train = pd.read_pickle('../input/train_catboost.pkl.gz', compression='gzip')
test = pd.read_pickle('../input/test_catboost.pkl.gz', compression='gzip')
target = pd.read_pickle('../input/target.pkl.gz', compression='gzip')


true_numerical_columns = [
    'Census_ProcessorCoreCount',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_InternalBatteryNumberOfCharges'
]

binary_variables = [c for c in train.columns if train[c].nunique() == 2]

categorical_columns = [c for c in train.columns 
                       if (c not in true_numerical_columns) & (c not in binary_variables)]

print("data preparation finished: ", time.strftime("%b %d %Y %H:%M:%S"))



print(train[categorical_columns].isna().sum())   

categorical_features_pos = utils.column_index(train, categorical_columns)
print(categorical_features_pos)


max_iter=1

features = train.columns

folds = KFold(n_splits=5, shuffle=True, random_state=15)
oof_cb = np.zeros(len(train))
predictions_cb = np.zeros(len(test))
score = [0 for _ in range(folds.n_splits)]

for fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, target.values)):
    print('------')
    print("Fold {} started ".format(fold_ + 1), time.strftime("%b %d %Y %H:%M:%S"))
    X_train, y_train = train[features].iloc[trn_idx], target.iloc[trn_idx]
    X_valid, y_valid = train[features].iloc[val_idx], target.iloc[val_idx]
    
   
    
    model = cb.CatBoostClassifier(
        learning_rate = 0.25,
        thread_count=54,
        iterations = 10000,
        eval_metric = 'AUC',
        allow_writing_files = False,
        od_type = 'Iter',
        bagging_temperature = 0.3,
        random_strength = 0.1,
        l2_leaf_reg = 0.1,
        depth = 8,
        od_wait = 20, 
        task_type='GPU')
    
            
    # Fit
    model.fit(
        X_train, y_train,
        eval_set=[(X_train, y_train), (X_valid, y_valid)],
        early_stopping_rounds=50,
        cat_features=categorical_features_pos,
        verbose_eval=100
    )
    
    oof_cb[val_idx] = model.predict(X_valid)
    predictions_cb += model.predict(test[features]) / min(folds.n_splits, max_iter)    
    
    score[fold_] = roc_auc_score(target.iloc[val_idx], oof_cb[val_idx])
    if fold_ == max_iter - 1: break
        
if (folds.n_splits == max_iter):
    print("CV score: {:<8.5f}".format(roc_auc_score(target, oof_cb)))
else:
     print("CV score: {:<8.5f}".format(sum(score) / max_iter))


# In[ ]:

sub_df = pd.read_csv('../input/sample_submission.csv')
sub_df["HasDetections"] = predictions_cb

sub_df.to_csv("../output/submit-catboost-cv{:6f}.csv".format(score), index=False)

print("script finished: ", time.strftime("%b %d %Y %H:%M:%S"))