import glob
import re
import numpy as np
import pandas as pd



VALID_PATERN = re.compile(r'valid_1\'s auc: (0.[0-9]+)')
FINAL_PATERN = re.compile(r'CV score: (0.[0-9]+)')
EXPERIMENT_PATERN = re.compile(r'e([0-9]{2})')

def clean_all_files(names):

    for fname in names:
        with open(fname, 'r', encoding='utf8') as logfile:
            lines = logfile.readlines()

        lines = [line for line in lines if not line.startswith('[LightGBM] [Warning]')]
        lines = [line for line in lines if not line.startswith('[LightGBM] [Info]')]
        lines = [line for line in lines if not line.startswith('  warnings.warn(')]
        lines = [line for line in lines if not line.startswith('/home/vrany/anaconda3/')]

        foldstart = lines.index('STARTING K-FOLD CV\n')
        lines = lines[foldstart:]

        with open(fname, 'w', encoding='utf8') as logfile:
            logfile.writelines(lines)


def main():
    names = glob.glob('../logs/*.txt')
    results = {}
    columns = ['experiment','mean', 'std', 'variance', 'final']
    df = pd.DataFrame(columns=columns)
    for fname in names:
        with open(fname, 'r', encoding='utf8') as logfile:
            lines = logfile.readlines()

        last_steps_cv = []    
        best_iterations = []

        for lnr, line in enumerate(lines):
            if line.startswith('Early stopping'):
                last_step = lines[lnr-1].strip()
                match = VALID_PATERN.search(last_step)
                last_step = float(match.groups()[0])
                last_steps_cv.append(last_step)
                best_iter = lines[lnr+1]
                match2 = VALID_PATERN.search(best_iter)
                best_iter = float(match2.groups()[0])
                best_iterations.append(best_iter)

            if line.startswith('CV score'):
                final_match = FINAL_PATERN.search(line)
                final_score = float(final_match.groups()[0])

        last_steps_na = np.array(last_steps_cv)

        results[fname] = {
                'last_steps': last_steps_cv, 
                'best_iters': best_iterations,
                'final': final_score
            }

        expmatch = EXPERIMENT_PATERN.search(fname)
        experiment = int(expmatch.groups()[0])

        sdf = pd.DataFrame([[experiment, np.mean(last_steps_na), np.std(last_steps_na), np.var(last_steps_na), final_score]], columns=columns)    
        df = df.append(sdf, ignore_index=True)
        
    df = df.sort_values(by=['experiment'])
    df.to_csv('scores.csv', index=False)    
    print(df)    

if __name__ == '__main__':
    main()