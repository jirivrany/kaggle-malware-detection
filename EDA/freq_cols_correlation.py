import pickle
import sys
import numpy as np # linear algebra
import pandas as pd
from itertools import combinations


train = pd.read_pickle('../input/train-encoded-allcols.pkl')
target = pd.read_pickle('../input/target.pkl')

train['HasDetections'] = target

cols_high_corr = ['EngineVersion',
 'AppVersion',
 'AvSigVersion',
 'RtpStateBitfield',
 'AVProductStatesIdentifier',
 'AVProductsInstalled',
 'AVProductsEnabled',
 'Processor',
 'IsProtected',
 'SmartScreen',
 'Census_ProcessorCoreCount',
 'Census_TotalPhysicalRAM',
 'Census_PowerPlatformRoleName',
 'Census_OSVersion',
 'Census_OSArchitecture',
 'Census_OSBranch',
 'Census_IsTouchEnabled',
 'Wdft_IsGamer',
 'EngineVersion_factor',
 'AvSigVersion_factor']


cols = list(train.columns)
cols.remove('MachineIdentifier')
print(cols)
print('MachineIdentifier' in cols)

cols_comb = combinations(cols, 2)

print(train.shape)
important_combs_over20 = []
important_combs_over15 = []
important_combs_over10 = []
for com in cols_comb:
    new_name = "fe_{}_{}_freq".format(com[0], com[1])
    pokus = train.groupby(com)['OsBuild'].transform('count') / train.shape[0]
    score = abs(train['HasDetections'].corr(pokus))
    if score > 0.2:
        important_combs_over20.append(com)
        print('20 / added {} with {}'.format(new_name, score))
    if score > 0.15:
        important_combs_over15.append(com)
        print('15 / added {} with {}'.format(new_name, score))
    if score > 0.10:
        important_combs_over10.append(com)
        print('10 / added {} with {}'.format(new_name, score))        

thismodule = sys.modules[__name__]
    
for rank in [10, 15, 20]:
    corlist = getattr(thismodule, 'important_combs_over{}'.format(rank))
    with open('../input/important_combs_over{}.pkl'.format(rank), 'wb') as pickfile:
        pickle.dump(corlist, pickfile)




#corr_matrix = train.corr()
#print(corr_matrix['HasDetections'].abs().sort_values(ascending = False))
