import pickle

import numpy as np # linear algebra
import pandas as pd
from itertools import combinations


train = pd.read_pickle('../input/train-encoded-full.pkl')
target = pd.read_pickle('../input/target.pkl')

train['HasDetections'] = target

cols = ['EngineVersion',
 'AppVersion',
 'AvSigVersion',
 'RtpStateBitfield',
 'AVProductStatesIdentifier',
 'AVProductsInstalled',
 'AVProductsEnabled',
 'Processor',
 'IsProtected',
 'SmartScreen',
 'Census_ProcessorCoreCount',
 'Census_TotalPhysicalRAM',
 'Census_PowerPlatformRoleName',
 'Census_OSVersion',
 'Census_OSArchitecture',
 'Census_OSBranch',
 'Census_IsTouchEnabled',
 'Wdft_IsGamer',
 'EngineVersion_factor',
 'AvSigVersion_factor']


cols_comb = combinations(cols, 2)

print(train.shape)
important_combs = []
for com in cols_comb:
    new_name = "fe_{}_{}_freq".format(com[0], com[1])
    pokus = train.groupby(com)['OsBuild'].transform('count') / train.shape[0]
    score = abs(train['HasDetections'].corr(pokus))
    if score > 0.1:
        important_combs.append(com)
        print('added {} with {}'.format(new_name, score))

print(train.shape)

with open('../input/important_combs.pkl', 'wb') as pickfile:
    pickle.dump(important_combs, pickfile)

#corr_matrix = train.corr()
#print(corr_matrix['HasDetections'].abs().sort_values(ascending = False))
