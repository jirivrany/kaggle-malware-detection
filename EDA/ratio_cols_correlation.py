import pickle
import sys
import numpy as np # linear algebra
import pandas as pd
from itertools import combinations
from scipy.special import comb

import logging

logging.basicConfig(filename='../logs/ratiocomp.log', format='%(asctime)s %(message)s')



thismodule = sys.modules[__name__]


train = pd.read_pickle('../input/train-encoded-allcols.pkl')
target = pd.read_pickle('../input/target.pkl')

train['HasDetections'] = target

cols_high_corr = ['EngineVersion',
 'AppVersion',
 'AvSigVersion',
 'RtpStateBitfield',
 'AVProductStatesIdentifier',
 'AVProductsInstalled',
 'AVProductsEnabled',
 'Processor',
 'IsProtected',
 'SmartScreen',
 'Census_ProcessorCoreCount',
 'Census_TotalPhysicalRAM',
 'Census_PowerPlatformRoleName',
 'Census_OSVersion',
 'Census_OSArchitecture',
 'Census_OSBranch',
 'Census_IsTouchEnabled',
 'Wdft_IsGamer',
 'EngineVersion_factor',
 'AvSigVersion_factor']


cols = list(train.columns)
cols.remove('MachineIdentifier')
cols.remove('HasDetections')
print(cols)
print('MachineIdentifier' in cols)

cols_comb = combinations(cols, 2)

total = comb(len(cols), 2)

df_columns = ['colA', 'colB', 'corr_score']

important_combs = pd.DataFrame(columns=df_columns)


for i, com in enumerate(cols_comb):
    logging.info("{}/{} combinations processed ".format(i, total))
    try:
        pokus =  train[com[1]] / train[com[0]]
    except TypeError:
        logging.debug("nelze delit {}".format(com))
    else:        
        score = abs(train['HasDetections'].corr(pokus))
        if score > 0.10:
            df = pd.DataFrame([[com[0], com[1], score]], columns=df_columns)
            important_combs = important_combs.append(df,  ignore_index=True) 



important_combs.to_csv('../input/combinations_corr_ratios_inv.csv')



